// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/Or.hdl
/**
 * Or gate:
 * if (a or b) out = 1, else out = 0 
 */
CHIP Or {
    IN a, b;
    OUT out;

    PARTS:
    // Truth table of an Or gate:
    // a    b   out
    // 0    0   0
    // 0    1   1
    // 1    0   1
    // 1    1   1

    // Boolean expression: (NOT(a) AND b) OR (a AND NOT(b)) OR (a AND b)
    // DeMorgan's law states: NOT(a OR b) = NOT(a) AND NOT(b), which simplifies to (a OR b) = NOT(NOT(a) AND NOT(b))

    Not(in=a, out=notA);
    Not(in=b, out=notB);
    And(a=notA, b=notB, out=notAandNotB);
    Not(in=notAandNotB, out=out);

    // We could also implement this using NAND gates since a NAND gate can be written as (a NAND b) = NOT(a AND b)
    // Therefore the expression could also be (a OR b) = NAND(NOT(a) AND NOT(b))
    // Then our solution would be:

    // Not(in=a, out=notA);
    // Not(in=b, out=notB);
    // Nand(a=notA, b=notB, out=out)

    // I am not sure which one is preferred.
}
